#!/usr/bin/env python
#
# Copyright 2010,2011 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr, gru
from gnuradio import eng_notation
from gnuradio.eng_option import eng_option
from optparse import OptionParser
import time

# From gr-digital
from gnuradio import digital

# from current dir
from transmit_path import transmit_path
from receive_path import receive_path
from uhd_interface import uhd_receiver
from uhd_interface import uhd_transmitter

import struct
import sys, socket

from gnuradio import analog
from gnuradio.gr import firdes

#import os
#print os.getpid()
#raw_input('Attach and press enter: ')

import threading # used for feedback

class my_top_block(gr.top_block):
    def __init__(self, modulator, demodulator, rx_callback, options):
        gr.top_block.__init__(self)

        if(options.rx_freq is not None):
            # Work-around to get the modulation's bits_per_symbol
            args = demodulator.extract_kwargs_from_options(options)
            symbol_rate = options.bitrate / demodulator(**args).bits_per_symbol()
            self.source = uhd_receiver(options.args, symbol_rate,
                                       options.samples_per_symbol,
                                       options.rx_freq, options.rx_gain,
                                       options.spec, options.antenna,
                                       options.verbose)
            options.samples_per_symbol = self.source._sps

        elif(options.from_file is not None):
            sys.stderr.write(("Reading samples from '%s'.\n\n" % (options.from_file)))
            self.source = gr.file_source(gr.sizeof_gr_complex, options.from_file)
        else:
            sys.stderr.write("No source defined, pulling samples from null source.\n\n")
            self.source = gr.null_source(gr.sizeof_gr_complex)

        # Set up receive path
        # do this after for any adjustments to the options that may
        # occur in the sinks (specifically the UHD sink)
        self.rxpath = receive_path(demodulator, rx_callback, options) 

        # Used for feedback
        if(options.tx_freq is not None):
             # Work-around to get the modulation's bits_per_symbol
             
            args = modulator.extract_kwargs_from_options(options)
            symbol_rate = options.bitrate / modulator(**args).bits_per_symbol()

            self.sink = uhd_transmitter(options.args, symbol_rate,
                                        options.samples_per_symbol,
                                        options.tx_freq, options.tx_gain,
                                        options.spec, options.antenna,
                                        options.verbose)
            options.samples_per_symbol = self.sink._sps
                
        elif(options.to_file is not None):
            sys.stderr.write(("Saving samples to '%s'.\n\n" % (options.to_file)))
            self.sink = gr.file_sink(gr.sizeof_gr_complex, options.to_file)
        else:
            sys.stderr.write("No sink defined, dumping samples to null sink.\n\n")
            self.sink = gr.null_sink(gr.sizeof_gr_complex)

        # do this after for any adjustments to the options that may
        # occur in the sinks (specifically the UHD sink)
        self.txpath = transmit_path(modulator, options)

        self.txgate = gr.copy(gr.sizeof_gr_complex)
        self.rxgate = gr.copy(gr.sizeof_gr_complex)

        self.connect(self.source, self.rxgate, self.rxpath)

        self.connect(self.txpath, self.txgate, self.sink)

        self.tx_enabled = False
       

class dsc_pkt_sink(object):    
      def __init__(self, server, port=5125):       
          self.pkt_sink_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          self.pkt_sink_socket.connect((server,port))

      def send(self, payload):
          try:
             self.pkt_sink_socket.recv(4)
             self.pkt_sink_socket.send(payload)
          except socket.error:
             print "Connection to packet sink closed"

# /////////////////////////////////////////////////////////////////////////////
#                                   main
# /////////////////////////////////////////////////////////////////////////////

shutdown_event = threading.Event()

global n_rcvd, n_right

def main():
    global n_rcvd, n_right, fbpktno,  missing_packets, tx_enabled, pre_rcvd, pre_right, tb
    #global n_rcvd, n_right, start_time, stop_rcv
    
    #TIMEOUT = 600 # 600 sec for hurdle 3
    n_rcvd = 0
    n_right = 0
    pre_rcvd  = 0
    pre_right = 0
    tx_enabled = False
    fbstate=101
    fbpktno = 1

    #missing_packets = 
    
    # Used for feedback
    def dowork():
        global tb, tx_enabled, fbstate, pre_rcvd, pre_right, fbpktno
        
        flag=0
        while not shutdown_event.is_set():
            if time.time() % 10 <= 9 and tx_enabled==True:
                
                if flag==0:
                    pre_rcvd = n_rcvd
                    pre_right = n_right
                    flag = 1
                # Reset options.bandwidth at receiver according to fbsate
                '''
                if fbstate == 9 and tb._opts.bandwidth != BANDWIDTH_H:
                    tb._opts.bandwidth = BANDWIDTH_H
                    tb.sink.set_sample_rate(tb._opts.bandwidth)
                    tb.source.set_sample_rate(tb._opts.bandwidth)
                    
                    #print "L->H"
                elif fbstate == 7 and tb._opts.bandwidth != BANDWIDTH_L:
                    tb._opts.bandwidth = BANDWIDTH_L
                    tb.sink.set_sample_rate(tb._opts.bandwidth)
                    tb.source.set_sample_rate(tb._opts.bandwidth)
                '''

                # IMPORTANT: fbstate can only be 9 or 7

                tx_enabled = False
                tb.txgate.set_enabled(False)
                tb.rxgate.set_enabled(True)
                
                print "Rx side: receiving forward signal"

                

            if time.time() % 10 > 9 and tx_enabled==False:
                #print "tx bandwidth1", tb.sig1.get_sampling_rate(), "tx bandwidth2", tb.sig2.get_sampeling_rate()
                # Define feedback state here
                if (n_rcvd > pre_rcvd ) and float(n_right - pre_right)/float(n_rcvd - pre_rcvd) > 0.8:
                    # High rate
                    fbstate = 9
                else:
                    # Low Rate
                    fbstate = 7
                   
                flag = 0
                
                fbpktno += 1                


                tb.rxgate.set_enabled(False)            
                tx_enabled = True               
                
                tb.txgate.set_enabled(True)

                print "Rx side: sending feedback signal"
                

            time.sleep(.01)

    
    def rx_callback(ok, payload):
        #global n_rcvd, n_right, start_time, stop_rcv
        global n_rcvd, n_right
        (pktno,) = struct.unpack('!H', payload[0:2])
        n_rcvd += 1
        if ok:
            n_right += 1
            #serve.send(payload[2:])
        if pktno % 20 == 1:
            print "ok = %5s  pktno = %4d  n_rcvd = %4d  n_right = %4d" %(
                ok, pktno, n_rcvd, n_right)


    # Used for transmitting feedback
    def send_pkt(payload='', eof=False):
        return tb.txpath.send_pkt(payload, eof)

          

    demods = digital.modulation_utils.type_1_demods()

    # Create Options Parser:
    parser = OptionParser (option_class=eng_option, conflict_handler="resolve")
    expert_grp = parser.add_option_group("Expert")

    parser.add_option("-m", "--modulation", type="choice", choices=demods.keys(), 
                      default='gmsk_cats',
                      help="Select modulation from: %s [default=%%default]"
                            % (', '.join(demods.keys()),))
    parser.add_option("","--from-file", default=None,
                      help="input file of samples to demod")
    parser.add_option("","--to-file", default=None,
                      help="Output file for modulated samples")
    parser.add_option("-s", "--server", default="idb2",
                      help="server host name [default=%default]")
    parser.add_option("","--mode", default="COMP",
                      help="set match style [default=%default]")

    receive_path.add_options(parser, expert_grp)
    uhd_receiver.add_options(parser)

    for mod in demods.values():
        mod.add_options(expert_grp)

    # For feedback
    mods = digital.modulation_utils.type_1_mods()
    transmit_path.add_options(parser, expert_grp)
    uhd_transmitter.add_options(parser)

    for mod in mods.values():
        mod.add_options(expert_grp)

    

    (options, args) = parser.parse_args ()

    #########################################
    # Xu Chen: Hard Code Parameters 
    
    #options.bitrate = 2500000
    #options.samples_per_symbol = 2
    #options.modulation = "gmsk_cats"
    #options.rx_gain = 38
    #options.excess_bw = 0.35
    #######################################

    if len(args) != 0:
        parser.print_help(sys.stderr)
        sys.exit(1)

    if options.from_file is None:
        if options.rx_freq is None:
            sys.stderr.write("You must specify -f FREQ or --freq FREQ\n")
            parser.print_help(sys.stderr)
            sys.exit(1)



    # packet_sink
    #serve = dsc_pkt_sink(options.server)

    # build the graph
    tb = my_top_block(mods[options.modulation], demods[options.modulation], rx_callback, options)

    r = gr.enable_realtime_scheduling()
    if r != gr.RT_OK:
        print "Warning: Failed to enable realtime scheduling."

    tb.txgate.set_enabled(False)
    tb.rxgate.set_enabled(True)
    tb.start()        # start flow graph

    
    t = threading.Thread(target=dowork, args=(), name='worker')
    t.start()

    while True:
        if tx_enabled:
            data = 1440*chr(fbstate)
            payload = struct.pack('!H', fbpktno & 0xffff) + data
            send_pkt(payload)
            #sys.stderr.write('.')
        
    tb.wait()         # wait for it to finish
    
 
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass

