#!/usr/bin/env python
#
# Copyright 2010,2011 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr
from gnuradio import eng_notation
from gnuradio.eng_option import eng_option
from optparse import OptionParser

# From gr-digital
from gnuradio import digital

# from current dir
from transmit_path import transmit_path
from receive_path import receive_path
from uhd_interface import uhd_transmitter
from uhd_interface import uhd_receiver

import time, struct, sys, socket

from gnuradio import analog

#import os 
#print os.getpid()
#raw_input('Attach and press enter')

import threading # used for feedback

class my_top_block(gr.top_block):
    def __init__(self, modulator, demodulator, rx_callback, options): # Xu: demodulator and rx_callback are used for demod feedback
        gr.top_block.__init__(self)
        global bandchoose

        if(options.tx_freq is not None):
             # Work-around to get the modulation's bits_per_symbol
             
            args = modulator.extract_kwargs_from_options(options)
            symbol_rate = options.bitrate / modulator(**args).bits_per_symbol()

            self.sink = uhd_transmitter(options.args, symbol_rate,
                                        options.samples_per_symbol,
                                        options.tx_freq, options.tx_gain,
                                        options.spec, options.antenna,
                                        options.verbose)
            options.samples_per_symbol = self.sink._sps
                
        elif(options.to_file is not None):
            sys.stderr.write(("Saving samples to '%s'.\n\n" % (options.to_file)))
            self.sink = gr.file_sink(gr.sizeof_gr_complex, options.to_file)
        else:
            sys.stderr.write("No sink defined, dumping samples to null sink.\n\n")
            self.sink = gr.null_sink(gr.sizeof_gr_complex)

        # do this after for any adjustments to the options that may
        # occur in the sinks (specifically the UHD sink)
        self.txpath = transmit_path(modulator, options)

        # Receive path
        if(options.rx_freq is not None):
            # Work-around to get the modulation's bits_per_symbol
            args = demodulator.extract_kwargs_from_options(options)
            symbol_rate = options.bitrate / demodulator(**args).bits_per_symbol()

            self.source = uhd_receiver(options.args, symbol_rate,
                                       options.samples_per_symbol,
                                       options.rx_freq, options.rx_gain,
                                       options.spec, options.antenna,
                                       options.verbose)
            options.samples_per_symbol = self.source._sps

        elif(options.from_file is not None):
            sys.stderr.write(("Reading samples from '%s'.\n\n" % (options.from_file)))
            self.source = gr.file_source(gr.sizeof_gr_complex, options.from_file)
        else:
            sys.stderr.write("No source defined, pulling samples from null source.\n\n")
            self.source = gr.null_source(gr.sizeof_gr_complex)

        # Set up receive path
        # do this after for any adjustments to the options that may
        # occur in the sinks (specifically the UHD sink)
        self.rxpath = receive_path(demodulator, rx_callback, options) 

        # Resample signal to exactly self.usrp_rate
        # FIXME: make one of the follow-on filters an arb resampler
        #rrate = usrp_rate / dev_rate
        #self.resamp = blks2.pfb_arb_resampler_ccf(rrate)
        self.txgate = gr.copy(gr.sizeof_gr_complex)
        self.rxgate = gr.copy(gr.sizeof_gr_complex)
        
        self.connect(self.txpath, self.txgate, self.sink)
        self.connect(self.source, self.rxgate, self.rxpath)

        self.setmode(2)  # Xu: Set default mode =2

        self.tx_enabled = True


    def setmode(self, mode):
        ################################
        # mode = 1: bfsk + RS code 
        # mode = 2: bfsk + RS code + 1/3 Conv Code + soft decoding
        #################################

        self.mode = mode
        self.txpath.packet_transmitter.mode = mode
        self.rxpath.packet_receiver._watcher.mode = mode

        if mode == 1:
            self.rxpath.packet_receiver.framer_sink.setlen(1670)
            self.rxpath.packet_receiver.framer_sink.setdec('h')
        elif mode ==2:
            self.rxpath.packet_receiver.framer_sink.setlen(5034)
            self.rxpath.packet_receiver.framer_sink.setdec('s')


##################
# Server class
############3#####
class dsc_pkt_src(object):
    def __init__(self, server, port=5123 ):
        self.pkt_size = 1440 # 1440 bytes of data  
        self.pkt_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.pkt_server_socket.connect((server,port))
        self.MESSAGE = struct.pack('!l', self.pkt_size)
        self.pkt_server_socket.send(self.MESSAGE)

    def read(self):
        try:
            data = self.pkt_server_socket.recv(self.pkt_size)
        except socket.error:
            print "Connection to packet server closed"
            return ''
        self.pkt_server_socket.send(self.MESSAGE)
        return data

# /////////////////////////////////////////////////////////////////////////////
#                                   main
# /////////////////////////////////////////////////////////////////////////////
shutdown_event = threading.Event()

def main():

    global  totaldata, first_run, n_rcvd, n_right, tx_enabled, fbpayload, tb, fbmode


    totaldata = []
    n_rcvd = 0
    n_right = 0
    first_run = True
    tx_enabled = True
    fbmode = 2
    fbpayload = 1440* chr(fbmode)

    def dowork():
        global n_rcvd, n_right, tx_enabled, tb, fbmode

        
        while not shutdown_event.is_set():
            if time.time() % 30 <= 30 and tx_enabled == False:

                ########################################
                # Feedback message
                # fbmode = 1: High rate 
                # fbmode = 2: Low rate
                ##########################################
                
                if fbmode == 1 and tb.mode != fbmode: # High-rate
                    tb.setmode(fbmode)
                elif fbmode == 2 and tb.mode != fbmode: # Low-rate
                    tb.setmode(fbmode)
                elif fbmode !=1 and fbmode !=2 and tb.mode != 2:
                    tb.setmode(2)

                tx_enabled = True            
                tb.txgate.set_enabled(True)
                tb.rxgate.set_enabled(False)
                #sys.stderr.write("TX")
                
                print "Tx side: Transmitting at the forward link"

            if time.time() % 30 > 30 and tx_enabled == True:
                tx_enabled = False
                tb.txgate.set_enabled(False)
                time.sleep(0.01)
                tb.rxgate.set_enabled(True)
                  
                time.sleep(0.75)
                fbmode = ord(fbpayload[0])

                print "Tx side: Receiving feedback, fbmode ", fbmode
                
                    
                
            time.sleep(.01)


    def send_pkt(payload='', eof=False):
        return tb.txpath.send_pkt(payload, eof)

    # rx_callback used to receive the feedback from transmitter
    def rx_callback(ok, payload):
        #global n_rcvd, n_right, start_time, stop_rcv
        global n_rcvd, n_right
        (pktno,) = struct.unpack('!H', payload[0:2])
        n_rcvd += 1
        if ok:
            n_right += 1
            fbpayload = payload[2:]
        print "2- conv, 1-rs: rx fbmode is ", ord(fbpayload[0])
        print "ok = %5s  pktno = %4d  n_rcvd = %4d  n_right = %4d" %(
            ok, pktno, n_rcvd, n_right)

    mods = digital.modulation_utils.type_1_mods()

    parser = OptionParser(option_class=eng_option, conflict_handler="resolve")
    expert_grp = parser.add_option_group("Expert")

    parser.add_option("-m", "--modulation", type="choice", choices=mods.keys(),
                      default='gmsk_cats',
                      help="Select modulation from: %s [default=%%default]"
                            % (', '.join(mods.keys()),))

    #parser.add_option("-s", "--size", type="eng_float", default=1442,
    #                  help="set packet size [default=%default]")
    parser.add_option("-M", "--megabytes", type="eng_float", default=1.0,
                      help="set megabytes to transmit [default=%default]")
    parser.add_option("","--discontinuous", action="store_true", default=False,
                      help="enable discontinous transmission (bursts of 5 packets)")
    parser.add_option("","--from-file", default=None,
                      help="use intput file for packet contents")
    parser.add_option("","--to-file", default=None,
                      help="Output file for modulated samples")
    parser.add_option("-s", "--server", default="idb2",
                      help="server host name [default=%default]")
    parser.add_option("","--mode", default="COMP",
                      help="set match style [default=%default]")

    transmit_path.add_options(parser, expert_grp)
    uhd_transmitter.add_options(parser)


    for mod in mods.values():
        mod.add_options(expert_grp)

    # Used for receiving feedback
    demods = digital.modulation_utils.type_1_demods()
    receive_path.add_options(parser, expert_grp)
    uhd_receiver.add_options(parser)

    for mod in demods.values():
        mod.add_options(expert_grp)


    (options, args) = parser.parse_args ()

    #########################################
    # Xu Chen: Hard Code Parameters 
    
    #options.bitrate = 2500000
    #options.samples_per_symbol = 2
    #options.modulation = "gmsk_cats"
    #options.tx_amplitude = 0.8
    #options.tx_gain = 31.5
    #options.excess_bw = 0.35
   
    #######################################

    if len(args) != 0:
        parser.print_help()
        sys.exit(1)
           
    if options.from_file is not None:
        source_file = open(options.from_file, 'r')

    # packet_source
    serve = dsc_pkt_src(options.server)

    # build the graph
    tb = my_top_block(mods[options.modulation], demods[options.modulation], rx_callback, options)

    r = gr.enable_realtime_scheduling()
    if r != gr.RT_OK:
        print "Warning: failed to enable realtime scheduling"

    tb.txgate.set_enabled(True)
    tb.rxgate.set_enabled(False)

    tb.start()                       # start flow graph
    
    # Used for feedback    
    t = threading.Thread(target=dowork, args=(), name='worker')
    t.start()

    #nbytes = int(1e6 * options.megabytes)
    #n = 0
    pktno = 0
    pkt_size = 1440

    while True:
        if tx_enabled:
            if first_run:

                data = serve.read()
                #data = (pkt_size ) * chr(pktno & 0xff) 
                if len(data) != 1440: # End of file or Cannot fetch data
                    # print "No More"

                    if len(totaldata) == 0: # cannot fetch data from server
                        pass
                    else: # End of file
                        first_run = False
                else:
                    payload = struct.pack('!H', pktno & 0xffff) + data
                    send_pkt(payload)
                    sys.stderr.write('.')
                    pktno += 1
                    totaldata.append(data)
                    print "2- conv, 1-rs: tbmode is ", tb.mode
                    
            else: # repeat sending the data from the begining
                # Iterate over the totaldata in the following
                
                if len(totaldata) > pktno:
                    payload = struct.pack('!H', pktno & 0xffff) + totaldata[pktno]
                    if len(payload) == 1442: # Make sure payload is 1442 bytes for decoder to work
                        send_pkt(payload)
                        sys.stderr.write('.')
                        pktno = (pktno + 1) % len(totaldata)
                        print "2- conv, 1-rs: tbmode is ", tb.mode

                else:
                    pktno = 0
                    payload = struct.pack('!H', pktno & 0xffff) + totaldata[pktno]

                    if len(payload) == 1442: # Make sure payload is 1442 bytes for decoder to work
                        send_pkt(payload)
                        sys.stderr.write('.')
                        pktno = (pktno + 1) % len(totaldata)

        
        
    send_pkt(eof=True)

    tb.wait()                       # wait for it to finish

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass

